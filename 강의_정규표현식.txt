정규표현식
	- 패턴을 가지고 문자열 조회, 변경
	
	 RegExp
	 /패턴/ -> 정규표현식 객체
		.test(문자열) -> 패턴의 일치 여부(true, false)
		.exec(문자열) -> 패턴과 일치하는 문자열을 추출
		
	
	String
		.replace...
		
	1) /단어/ -> 문자열의 포함 여부	
	2) [abc] -> 문자클래스 -> 문자열에 a,b,c,중에 하나가 매칭이 되느냐?(문자 하나하나)
	   [^...] -> 문자가 아닌 문자
	   /^abc/ -> abc로 시작하는 문자
	   
	숫자
	   \d -> [0-9] -> 숫자인 문자
	   \D -> [^0-9] -> 숫자가 아닌 문자
	
	공백
	   \s -> 공백 하나가
	   \S -> 공백이 아닌 문자
	   
	단어(알파벳, 숫자, 인더스코어(_))
		\w --> 단어 패턴[a-zA-Z0-9_]
		\W --> 단어 패턴이 아닌 문자
		
	. -> 문자 1개(줄바꿈 문자(\n)를 제외한)
	
	패턴의 반복 범위
	x{2,4} -> x가 2이상 4이하 반복, (x가 2개, 3개,4개)
		예) const a = "01abc";
			/[0-9]{2,3}/.test(a);
			
			const phone = "010-3481-2101";
			/[\d]{3}-[\d]{3,4}-[\d]{3,4}/.test(phone);
	
	x{2} -> x가 2번 반복
	x{2,} -> x가 2번 이상 반복
	x{,4} -> x가 4이하 반복
	x? -> x{0,1} -> 0이상 1이하 -> x가 있어도 되고 없어도 되는 패턴
	x+ -> x{1,} -> 1이상 반복 -> 반드시 1개는 있어야 한다
	x* -> x{0,} -> 0이상 반복 -> 없어도 되고, 있어도 된다, 여러번 반복해도 된다

	
	참고) 패턴에서 사용되는 특수문자를 문자패턴으로 사용 할 경우 역슬래시(\)
		  예) [] - 문자클래스
			  \[abc\]
			  \?
			  \*
			  \/
			  
	/^단어/ -> 단어로 시작하는 패턴
	/단어$/ -> 단어로 끝나는 패턴
		예) const a = "apple,orange,mango";
			/^apple/.test(a);
			/mango$/.test(a);
	
	| -> OR : 여러개 중 하나의 패턴에 일치하는지
		예) /단어1|단어2|단어3/ -> 단어1, 단어2, 단어3 중에 하나
			const a = "I like an apple";
			/apple|banana|melon/.test(a);
	
	(패턴) -> 서브패턴
		   -> 1) 특정 패턴을 분리하여 문자열 치환
					replace
						예1) const birthDay = "1990년 10월 3일";
							 const pattern = /([\d]{4})\D+([\d]{1,2})\D+([\d]{1,2})/
							 const data = pattern.exec(birthDay);
							 const newBirthDay = data[0].replace(pattern, "$1/$2/$3");
										
						
						예2) const mobile = "010/3481/2101";
							 const pattern = /(0[17][016789])\/([\d]{3,4})\/([\d]{4})/;
							 const newMobile = mobile.replace(pattern, "$1-$2-$3");
							 
						예3) function mobileForamt(mobile){
						
								/**
									1. mobile 번호를 숫자로 전부 변경
										-> 숫자가 아닌 문자를 제거하면 -> 숫자만 남는다
									2. 숫자를 지정된 형식으로 변환
								*/
								
								mobile = mobile.replace(/[\D]/g, '');

								let pattern = /(\d{3})(\d{4})(\d{4})/;
								if(mobile.length == 10){
								  	pattern = /(\d{3})(\d{3})(\d{4})/;
								}
								
								mobile = mobile.replace(pattern, "$1-$2-$3");
								return mobile;
							 }
							 
							 mobileForamt("010 3481 2101");
							
		   -> 2) 특정 패턴의 문자열만 별도로 추출(이미지에서 src 속성에 있는 경로만 가져올 때)
				2-1) 네이버 메인페이지 -> 이미지의 경로
				<img src = "경로">
				
				<img src = '경로'>
				<img src = 경로>
				<IMG SRC = .....?>
				<img class = '...' id='...' src='' width'...'>
				
				/<img\s+\S*src = ["']?([^"'>]+)["']?[^>]*>/igm;
				
				.exec -> 실행될때마다 다음 찾는 위치로 이동 하면서 데이터를 추출
							1번 실행시 데이터는 1번 -> 마지막 위치 -> null반환
													-> 전부 추출 -> 반복문을 사용
								
						예) img태그의 src속성의 이미지 URL 전부 추출 예		
							const html = document.body.innerHTML;
							const pattern = /<img\s+\S*src=["']?([^"'>]+)["']?[^>]*>/igm;
							let data;
							const images = [];
							while(data = pattern.exec(html)) { // data 객체로 반환 - true, 끝에 도달하면 null - false - 반복 정지
								images.push(data[1]);
							}						
				
		   
	
	플래그
		/패턴/플래그
			i - case-insensitive -> 대소문자 구분 없이 체크 [a-zA-Z] ---> /[a-z]/i
				예) const a = "APPLE";
					/[a-z]/i.test(a);
			
			g - global -> 전역 체크
					str.replace(//g,);
						예) let a = "1 little, 2 little, 3 little indians";
							a = a.replace(/little/g, "big");
							
			m - 여러줄 모드로 검색				
		